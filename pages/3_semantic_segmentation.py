import streamlit as st
import os
import sys
import numpy as np
import cv2
from PIL import Image
import io
import time
import tempfile
import matplotlib.pyplot as plt

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from models.unet_segmentation import UNetSegmentator

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è",
    page_icon="üó∫Ô∏è",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∞—ç—Ä–æ–∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö —Å–Ω–∏–º–∫–æ–≤")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞
@st.cache_resource
def load_model():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å U-Net
    model_path = "/home/s2pac/ElbrusBootcamp/Nikitaproject/prodject/best_model.pth"
    return UNetSegmentator(model_path)

try:
    segmentator = load_model()
    model_loaded = True
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    model_loaded = False

if model_loaded:
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –º–∞—Å–∫–∏
        alpha = st.slider("–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–∞—Å–∫–∏", 0.0, 1.0, 0.5, 0.1, 
                         help="–ß–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º –±–æ–ª–µ–µ –≤–∏–¥–∏–º–æ–π –±—É–¥–µ—Ç –º–∞—Å–∫–∞")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
        info = segmentator.get_training_info()
        
        st.markdown(f"""
        - **–ß–∏—Å–ª–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è:** {info['epochs']}
        - **–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {info['image_size']}x{info['image_size']}
        - **–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:** U-Net
        """)
        
        st.subheader("–û–±—ä–µ–º –≤—ã–±–æ—Ä–æ–∫:")
        st.markdown(f"""
        - –û–±—É—á–∞—é—â–∞—è: {info['dataset_size']['train']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        - –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è: {info['dataset_size']['val']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """)
        
        st.subheader("–ú–µ—Ç—Ä–∏–∫–∏:")
        st.markdown(f"""
        - Dice Score: {info['best_metrics']['Dice']:.3f}
        - IoU: {info['best_metrics']['IoU']:.3f}
        - Accuracy: {info['best_metrics']['Accuracy']:.3f}
        - Loss: {info['best_metrics']['Loss']:.3f}
        """)

    # –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    tab1, tab2, tab3 = st.tabs(["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–ú–µ—Ç—Ä–∏–∫–∏"])

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    with tab1:
        st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        uploaded_files = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                                          type=["jpg", "jpeg", "png"], 
                                          accept_multiple_files=True)
        
        if uploaded_files:
            for uploaded_file in uploaded_files:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                with st.spinner(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {uploaded_file.name}..."):
                    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_bytes = uploaded_file.getvalue()
                    image = Image.open(io.BytesIO(image_bytes))
                    
                    # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
                    original, overlay, mask = segmentator.segment_from_image(image, alpha)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        st.image(original, use_container_width=True)
                    
                    with col2:
                        st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –º–∞—Å–∫–∞")
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–µ—Ä–∞—è –º–∞—Å–∫–∞)
                        mask_display = (mask * 255).astype(np.uint8)
                        mask_image = Image.fromarray(mask_display, mode='L')
                        st.image(mask_image, use_container_width=True)
                    
                    with col3:
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
                        st.image(overlay, use_container_width=True)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å–∫–µ
                    total_pixels = mask.shape[0] * mask.shape[1]
                    segmented_pixels = np.sum(mask > 0.5)
                    percentage = (segmented_pixels / total_pixels) * 100
                    
                    st.info(f"""
                    **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:**
                    - –í—Å–µ–≥–æ –ø–∏–∫—Å–µ–ª–µ–π: {total_pixels:,}
                    - –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {segmented_pixels:,}
                    - –ü—Ä–æ—Ü–µ–Ω—Ç —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏: {percentage:.2f}%
                    """)
                    
                    st.markdown("---")

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ URL
    with tab2:
        st.header("–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        example_images = {
            "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π —Å–Ω–∏–º–æ–∫ 1": "https://russian.news.cn/photo/2016-12/06/135883913_14809906178831n.jpg",
            "–ê—ç—Ä–æ—Ñ–æ—Ç–æ—Å–Ω–∏–º–æ–∫": "https://images.unsplash.com/photo-1602526430717-e0c8e838e885?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80",
            "–°–ø—É—Ç–Ω–∏–∫–æ–≤—ã–π —Å–Ω–∏–º–æ–∫": "https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?ixlib=rb-4.0.3&auto=format&fit=crop&w=1000&q=80"
        }
        
        # selected_example = st.selectbox(
        #     "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π URL", 
        #     ["–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä..."] + list(example_images.keys())
        # )
        
        # if selected_example != "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä...":
        #     url = example_images[selected_example]
        # else:
        url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "https://img.freepik.com/free-photo/aerial-shot-field-with-colorful-trees-forest_181624-30988.jpg?semt=ais_hybrid&w=740")
        
        if url and st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
            try:
                with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                    # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ URL
                    original, overlay, mask = segmentator.segment_from_url(url, alpha)
                    
                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        st.image(original, use_container_width=True)
                    
                    with col2:
                        st.subheader("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è –º–∞—Å–∫–∞")
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–µ—Ä–∞—è –º–∞—Å–∫–∞)
                        mask_display = (mask * 255).astype(np.uint8)
                        mask_image = Image.fromarray(mask_display, mode='L')
                        st.image(mask_image, use_container_width=True)
                    
                    with col3:
                        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
                        st.image(overlay, use_container_width=True)
                    
                    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—Å–∫–µ
                    total_pixels = mask.shape[0] * mask.shape[1]
                    segmented_pixels = np.sum(mask > 0.5)
                    percentage = (segmented_pixels / total_pixels) * 100
                    
                    st.info(f"""
                    **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏:**
                    - –í—Å–µ–≥–æ –ø–∏–∫—Å–µ–ª–µ–π: {total_pixels:,}
                    - –°–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {segmented_pixels:,}
                    - –ü—Ä–æ—Ü–µ–Ω—Ç —Å–µ–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏: {percentage:.2f}%
                    """)
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # –ú–µ—Ç—Ä–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
    with tab3:
        st.header("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
        
        # –ì—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è
        metrics_fig = segmentator.plot_metrics_demo()
        st.pyplot(metrics_fig)
        
        st.subheader("–û —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
        st.markdown("""
        **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è** - —ç—Ç–æ –∑–∞–¥–∞—á–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ 
        –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∂–¥–æ–≥–æ –ø–∏–∫—Å–µ–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
        
        –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ **U-Net**:
        
        1. **–≠–Ω–∫–æ–¥–µ—Ä (Encoder)** - —Å–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞—è –≤–∞–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        2. **–î–µ–∫–æ–¥–µ—Ä (Decoder)** - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        3. **Skip-connections** - —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –¥–µ—Ç–∞–ª–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        
        **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏—è:**
        - –ê–Ω–∞–ª–∏–∑ —Å–ø—É—Ç–Ω–∏–∫–æ–≤—ã—Ö —Å–Ω–∏–º–∫–æ–≤
        - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        - –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –≤–æ–∂–¥–µ–Ω–∏–µ
        - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—ç—Ä–æ—Ñ–æ—Ç–æ—Å–Ω–∏–º–∫–æ–≤
        
        **–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**
        - **Dice Score** - –º–µ—Ä–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π –∏ –∏—Å—Ç–∏–Ω–Ω–æ–π –º–∞—Å–∫–æ–π
        - **IoU (Intersection over Union)** - –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—é
        - **Accuracy** - –¥–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        """)
        
else:
    st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏.") 