import streamlit as st
import os
import sys
import numpy as np
import cv2
from PIL import Image
import io
import time
import tempfile
import matplotlib.pyplot as plt

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from models.face_detector import FaceDetector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º",
    page_icon="üë§",
    layout="wide"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.title("–î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
@st.cache_resource
def load_model():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –¥–µ—Ç–µ–∫—Ü–∏–∏ –ª–∏—Ü
    model_path = "/home/s2pac/ElbrusBootcamp/ZhenyaProject/runs/detect/train/weights2/best.pt"
    return FaceDetector(model_path)

detector = load_model()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
with st.sidebar:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Ä–æ–≥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    confidence = st.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 0.0, 1.0, 0.3, 0.05)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–µ–ø–µ–Ω–∏ —Ä–∞–∑–º—ã—Ç–∏—è
    blur_amount = st.slider("–°—Ç–µ–ø–µ–Ω—å —Ä–∞–∑–º—ã—Ç–∏—è", 5, 45, 25, 2, 
                           help="–ß–µ–º –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–µ–º —Å–∏–ª—å–Ω–µ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –ª–∏—Ü")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")
    info = detector.get_training_info()
    
    st.markdown(f"""
    - **–ß–∏—Å–ª–æ —ç–ø–æ—Ö –æ–±—É—á–µ–Ω–∏—è:** {info['epochs']}
    - **–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {info['image_size']}x{info['image_size']}
    """)
    
    st.subheader("–û–±—ä–µ–º –≤—ã–±–æ—Ä–æ–∫:")
    st.markdown(f"""
    - –û–±—É—á–∞—é—â–∞—è: {info['dataset_size']['train']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è: {info['dataset_size']['val']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    """)
    
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∏:")
    st.markdown(f"""
    - mAP50: {info['best_metrics']['mAP50']:.3f}
    - mAP50-95: {info['best_metrics']['mAP50-95']:.3f}
    - –¢–æ—á–Ω–æ—Å—Ç—å: {info['best_metrics']['precision']:.3f}
    - –ü–æ–ª–Ω–æ—Ç–∞: {info['best_metrics']['recall']:.3f}
    """)

# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
tab1, tab2, tab3 = st.tabs(["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤", "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "–ú–µ—Ç—Ä–∏–∫–∏"])

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
with tab1:
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    uploaded_files = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", 
                                      type=["jpg", "jpeg", "png"], 
                                      accept_multiple_files=True)
    
    if uploaded_files:
        for uploaded_file in uploaded_files:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            with st.spinner(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {uploaded_file.name}..."):
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_bytes = uploaded_file.getvalue()
                image = Image.open(io.BytesIO(image_bytes))
                
                # –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü –∏ —Ä–∞–∑–º—ã—Ç–∏–µ
                result_image, result = detector.detect_from_image(
                    image, 
                    conf_threshold=confidence, 
                    blur_factor=blur_amount
                )
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    st.image(image, use_container_width=True)
                
                with col2:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º")
                    st.image(result_image, use_container_width=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç–µ–∫—Ü–∏—è—Ö
                if len(result.boxes) > 0:
                    st.success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {len(result.boxes)}")
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
                    boxes_data = []
                    for i, box in enumerate(result.boxes):
                        conf = float(box.conf[0])
                        boxes_data.append({
                            "‚Ññ": i+1,
                            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{conf:.2f}",
                            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (xmin, ymin, xmax, ymax)": 
                                f"{box.xyxy[0][0]:.1f}, {box.xyxy[0][1]:.1f}, {box.xyxy[0][2]:.1f}, {box.xyxy[0][3]:.1f}"
                        })
                    
                    st.table(boxes_data)
                else:
                    st.warning("–õ–∏—Ü–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                
                st.markdown("---")

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ URL
with tab2:
    st.header("–î–µ—Ç–µ–∫—Ü–∏—è –ø–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", 
                         "https://thumbs.dreamstime.com/z/%D0%B3%D1%80%D1%83%D0%BF%D0%BF%D0%B0-%D0%BB%D1%8E%D0%B4%D0%B5%D0%B9-%D1%80%D0%B0%D0%B7%D0%BD%D0%BE%D0%B3%D0%BE-%D0%B2%D0%BE%D0%B7%D1%80%D0%B0%D1%81%D1%82%D0%B0-%D0%BA%D0%B0%D0%BA-%D1%87%D0%B0%D1%81%D1%82%D0%BD%D1%8B%D0%B5-%D0%BB%D0%B8%D1%86%D0%B0-%D1%80%D0%B0%D0%B7%D0%BD%D1%8B%D1%85-%D0%B2%D0%BE%D0%B7%D1%80%D0%B0%D1%81%D1%82%D0%BE%D0%B2-218504977.jpg")
    
    if url and st.button("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"):
        try:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                # –î–µ—Ç–µ–∫—Ü–∏—è –ª–∏—Ü –ø–æ URL –∏ —Ä–∞–∑–º—ã—Ç–∏–µ
                result_image, result = detector.detect_from_url(
                    url, 
                    conf_threshold=confidence, 
                    blur_factor=blur_amount
                )
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                col1, col2 = st.columns(2)
                with col1:
                    st.subheader("–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                    st.image(url, use_container_width=True)
                
                with col2:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º")
                    st.image(result_image, use_container_width=True)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç–µ–∫—Ü–∏—è—Ö
                if len(result.boxes) > 0:
                    st.success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ª–∏—Ü: {len(result.boxes)}")
                    
                    # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
                    boxes_data = []
                    for i, box in enumerate(result.boxes):
                        conf = float(box.conf[0])
                        boxes_data.append({
                            "‚Ññ": i+1,
                            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{conf:.2f}",
                            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (xmin, ymin, xmax, ymax)": 
                                f"{box.xyxy[0][0]:.1f}, {box.xyxy[0][1]:.1f}, {box.xyxy[0][2]:.1f}, {box.xyxy[0][3]:.1f}"
                        })
                    
                    st.table(boxes_data)
                else:
                    st.warning("–õ–∏—Ü–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# –ú–µ—Ç—Ä–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏
with tab3:
    st.header("–ú–µ—Ç—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("PR-–∫—Ä–∏–≤–∞—è")
        pr_curve = detector.plot_pr_curve()
        st.pyplot(pr_curve)
        
        st.markdown("""
        **PR-–∫—Ä–∏–≤–∞—è** (Precision-Recall) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –ø–æ–ª–Ω–æ—Ç–æ–π –º–æ–¥–µ–ª–∏ 
        –ø—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ—Ä–æ–≥–∞—Ö —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏. –ò–¥–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç –∫—Ä–∏–≤—É—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ 
        –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –≥—Ä–∞—Ñ–∏–∫–∞.
        """)
    
    with col2:
        st.subheader("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
        conf_matrix = detector.plot_confusion_matrix()
        st.pyplot(conf_matrix)
        
        st.markdown("""
        **–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫** –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–∏–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, 
        –ª–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö, –∏—Å—Ç–∏–Ω–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –ª–æ–∂–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
        """)
        
    st.subheader("–û —Ä–∞–∑–º—ã—Ç–∏–∏ –ª–∏—Ü")
    st.markdown("""
    –†–∞–∑–º—ã—Ç–∏–µ –ª–∏—Ü (face blurring) - —ç—Ç–æ —Ç–µ—Ö–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞—â–∏—Ç—ã –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –ª—é–¥–µ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö.
    –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:
    
    1. –°–Ω–∞—á–∞–ª–∞ –º—ã –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –ª–∏—Ü–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ YOLO
    2. –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ì–∞—É—Å—Å–æ–≤—Å–∫–æ–≥–æ —Ä–∞–∑–º—ã—Ç–∏—è –∫ –∫–∞–∂–¥–æ–π –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –ª–∏—Ü–∞
    3. –°—Ç–µ–ø–µ–Ω—å —Ä–∞–∑–º—ã—Ç–∏—è –º–æ–∂–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –ø–æ–ª–∑—É–Ω–∫–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    
    –≠—Ç–∞ —Ç–µ—Ö–Ω–∏–∫–∞ —á–∞—Å—Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–∞—Ö –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –∂—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞ –¥–ª—è 
    –∑–∞—â–∏—Ç—ã –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∑–∞–∫–æ–Ω–æ–≤ –æ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.
    """)